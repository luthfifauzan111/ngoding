/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tubes4;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.util.ArrayList;
/**
 *
 * @author hawaa
 */
public class Percob extends javax.swing.JFrame {

    ArrayList<Pelanggan> listPelanggan = new ArrayList<Pelanggan>();
    ArrayList<Pembayaran> listPembayaran = new ArrayList<Pembayaran>();
    ArrayList<TiketVIP> listTiketVIP = new ArrayList<>();
    ArrayList<TiketReguler> listTiketReguler = new ArrayList<>();
    ArrayList<Konser> listKonser = new ArrayList<Konser>();
    DefaultTableModel tabelModel;
    /**
     * Creates new form Percob
     */
    public Percob() {
        initComponents();
        tampilData();
        listKonser.add(new Konser("Metallica"));
       listKonser.add(new Konser("Guns N' Roses"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ID = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nama = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        tiket = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        metal = new javax.swing.JRadioButton();
        guns = new javax.swing.JRadioButton();
        email = new javax.swing.JTextField();
        Simpan = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        Edit = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        notelp = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jumlah = new javax.swing.JTextField();
        Hapus = new javax.swing.JButton();
        cari1 = new javax.swing.JTextField();
        Cari = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        kembali = new javax.swing.JButton();
        simpanedit = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel2.setText("Nama");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 130, -1, -1));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel3.setText("Email");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 170, 37, -1));

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel6.setText("Jumlah Tiket");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 349, -1, -1));

        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });
        jPanel1.add(ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 90, 159, -1));

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel1.setText("ID Pemesanan");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, -1));
        jPanel1.add(nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 130, 159, -1));

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 50, 20));

        tiket.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---", "VIP", "Reguler" }));
        jPanel1.add(tiket, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, -1, -1));

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel4.setText("No telp");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 60, 20));

        buttonGroup1.add(metal);
        metal.setText("Metallica");
        metal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metalActionPerformed(evt);
            }
        });
        jPanel1.add(metal, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 400, -1, -1));

        buttonGroup1.add(guns);
        guns.setText("Guns n Roses");
        jPanel1.add(guns, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, -1, -1));
        jPanel1.add(email, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 170, 159, -1));

        Simpan.setText("Simpan");
        Simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimpanActionPerformed(evt);
            }
        });
        jPanel1.add(Simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, -1, -1));

        jPanel7.setBackground(new java.awt.Color(153, 153, 153));

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel9.setText("Nama Konser");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jLabel9))
        );

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 90, -1));

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });
        jPanel1.add(Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 480, -1, -1));

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 50, 20));

        jPanel8.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 90, 20));
        jPanel1.add(notelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 210, 159, -1));

        jPanel9.setBackground(new java.awt.Color(153, 153, 153));

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel10.setText("Jenis Tiket");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10))
        );

        jPanel1.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));
        jPanel1.add(jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 349, 159, -1));

        Hapus.setText("Hapus");
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });
        jPanel1.add(Hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 480, -1, -1));
        jPanel1.add(cari1, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 85, 313, -1));

        Cari.setText("Cari");
        Cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariActionPerformed(evt);
            }
        });
        jPanel1.add(Cari, new org.netbeans.lib.awtextra.AbsoluteConstraints(888, 85, -1, -1));

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 120, 583, 363));

        kembali.setText("Kembali");
        kembali.setEnabled(false);
        kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembaliActionPerformed(evt);
            }
        });
        jPanel1.add(kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 501, -1, -1));

        simpanedit.setText("Simpan Edit");
        simpanedit.setEnabled(false);
        simpanedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpaneditActionPerformed(evt);
            }
        });
        jPanel1.add(simpanedit, new org.netbeans.lib.awtextra.AbsoluteConstraints(866, 501, -1, -1));

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        jLabel7.setText("FORM PEMESANAN TIKET KONSER");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(309, 17, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon("C:\\Users\\hawaa\\Downloads\\gambar1 (1).jpg")); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 1501, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 990, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDActionPerformed

    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
        // TODO add your handling code here:                                    
    int selectedRow = tblData.getSelectedRow();
    
    if (selectedRow != -1) {
        // Mengambil ID Pemesanan yang dipilih
        String idPemesanan = (String) tblData.getValueAt(selectedRow, 0);
        
        // Menghapus Tiket VIP berdasarkan ID Pemesanan
        for (TiketVIP t : listTiketVIP) {
            if (String.valueOf(t.getIdPemesanan()).equals(idPemesanan)) {
                listTiketVIP.remove(t);  // Menghapus tiket VIP
                tampilData();  // Menampilkan data setelah dihapus
                JOptionPane.showMessageDialog(this, "Tiket VIP berhasil dihapus!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        
        // Menghapus Tiket Reguler berdasarkan ID Pemesanan
        for (TiketReguler t : listTiketReguler) {
            if (String.valueOf(t.getIdPemesanan()).equals(idPemesanan)) {
                listTiketReguler.remove(t);  // Menghapus tiket Reguler
                tampilData();  // Menampilkan data setelah dihapus
                JOptionPane.showMessageDialog(this, "Tiket Reguler berhasil dihapus!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        
        // Jika tidak ditemukan tiket yang sesuai, beri informasi error
        JOptionPane.showMessageDialog(this, "Data pemesanan tidak ditemukan untuk dihapus!", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        // Jika tidak ada baris yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus!", "Warning", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_HapusActionPerformed

    private void SimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimpanActionPerformed
        // TODO add your handling code here:
        // Mengambil data dari inputan form
    String namaPelanggan = nama.getText();
    String emailPelanggan = email.getText();
    String notelpPelanggan = notelp.getText();
    String jenisTiket = (String) tiket.getSelectedItem();
    int jumlahTiket = Integer.parseInt(jumlah.getText());
    
    // Menentukan konser yang dipilih, konserDipilih adalah objek Konser, bukan String
    Konser konserDipilih = null;
    
    // Mengecek konser yang dipilih berdasarkan radio button
    if (metal.isSelected()) {
        konserDipilih = listKonser.get(0);  // Misalnya listKonser.get(0) adalah Metallica
    } else if (guns.isSelected()) {
        konserDipilih = listKonser.get(1);  // Misalnya listKonser.get(1) adalah Guns N' Roses
    }
    
    if (konserDipilih == null) {
        JOptionPane.showMessageDialog(this, "Pilih konser terlebih dahulu.");
        return; // Tidak lanjut jika konser belum dipilih
    }

    // Membuat objek pelanggan
    Pelanggan pelanggan = new Pelanggan(listPelanggan.size() + 1, namaPelanggan, emailPelanggan, notelpPelanggan);
    listPelanggan.add(pelanggan);

    // Menentukan harga dan jenis tiket
    double totalHarga = 0;
    if ("VIP".equals(jenisTiket)) {
        totalHarga = 100000;  // Harga tiket VIP
        String fasilitasVIP = "Fasilitas VIP";  // Fasilitas untuk VIP
        // Membuat objek TiketVIP dengan konser yang dipilih
        TiketVIP tiketVIP = new TiketVIP(listTiketVIP.size() + 1, totalHarga, fasilitasVIP, pelanggan, "VIP", jumlahTiket, konserDipilih);
        listTiketVIP.add(tiketVIP);
        pelanggan.tambahTiket(tiketVIP);
        Pembayaran pembayaran = new Pembayaran(listPembayaran.size() + 1, totalHarga * jumlahTiket, "lunas", pelanggan);
        listPembayaran.add(pembayaran);
    } else if ("Reguler".equals(jenisTiket)) {
        totalHarga = 50000;  // Harga tiket Reguler
        String fasilitasReguler = "Fasilitas Reguler";  // Fasilitas untuk tiket reguler
        // Membuat objek TiketReguler dengan konser yang dipilih
        TiketReguler tiketReguler = new TiketReguler(listTiketReguler.size() + 1, totalHarga, fasilitasReguler, pelanggan, "Reguler", jumlahTiket, konserDipilih);
        listTiketReguler.add(tiketReguler);
        Pembayaran pembayaran = new Pembayaran(listPembayaran.size() + 1, totalHarga * jumlahTiket, "Lunas", pelanggan);
        listPembayaran.add(pembayaran);
    }
    
    // Menampilkan data setelah disimpan
    tampilData();
    
    // Reset inputan setelah data disimpan
    resetInputan();
    }//GEN-LAST:event_SimpanActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        // TODO add your handling code here:
        simpanedit.setEnabled(true);  // Enable tombol simpan edit
    int selectedRow = tblData.getSelectedRow();  // Mendapatkan baris yang dipilih di tabel

    if (selectedRow != -1) {  // Jika baris yang dipilih ada
        String idPemesanan = (String) tblData.getValueAt(selectedRow, 0);  // Mendapatkan ID pemesanan

        // Mengecek tiket VIP
        for (TiketVIP t : listTiketVIP) {
            if (String.valueOf(t.getIdPemesanan()).equals(idPemesanan)) {
                // Update data pada form dengan data yang dipilih
                nama.setText(t.getPelanggan().getNama());
                email.setText(t.getPelanggan().getEmail());
                notelp.setText(t.getPelanggan().getNotelp());
                tiket.setSelectedItem("VIP");  // Mengatur pilihan tiket ke VIP
                jumlah.setText(String.valueOf(t.getJumlahTiket()));
                
                // Menambahkan logika untuk memilih konser pada form
               if (t.getKonser().getNamaKonser().equals("Metallica")) {
                    metal.setSelected(true); // Jika konser Metallica
                } else if (t.getKonser().getNamaKonser().equals("Guns N' Roses")) {
                    guns.setSelected(true);  // Jika konser Guns N' Roses
                }

                return;  // Keluar setelah menemukan tiket VIP
            }
        }

        // Mengecek tiket Reguler
        for (TiketReguler t : listTiketReguler) {
            if (String.valueOf(t.getIdPemesanan()).equals(idPemesanan)) {
                // Update data pada form dengan data yang dipilih
                nama.setText(t.getPelanggan().getNama());
                email.setText(t.getPelanggan().getEmail());
                notelp.setText(t.getPelanggan().getNotelp());
                tiket.setSelectedItem("Reguler");  // Mengatur pilihan tiket ke Reguler
                jumlah.setText(String.valueOf(t.getJumlahTiket()));

                // Menambahkan logika untuk memilih konser pada form
               if (t.getKonser().getNamaKonser().equals("Metallica")) {
                    metal.setSelected(true); // Jika konser Metallica
                } else if (t.getKonser().getNamaKonser().equals("Guns N' Roses")) {
                    guns.setSelected(true);  // Jika konser Guns N' Roses
                }

                return;  // Keluar setelah menemukan tiket Reguler
            }
        }

    } else {
        // Jika tidak ada baris yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diedit!", "Error", JOptionPane.ERROR_MESSAGE);
    } 
    }//GEN-LAST:event_EditActionPerformed

    private void simpaneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpaneditActionPerformed
        // TODO add your handling code here:
        String namaPelanggan = nama.getText();
    String emailPelanggan = email.getText();
    String notelpPelanggan = notelp.getText();  // Nomor telepon
    String jenisTiket = (String) tiket.getSelectedItem();
    int jumlahTiket = Integer.parseInt(jumlah.getText());
    
    // Menentukan konser yang dipilih berdasarkan radio button
    Konser konserDipilih = null;
    if (metal.isSelected()) {
        konserDipilih = listKonser.get(0);  // Misalnya listKonser.get(0) adalah Metallica
    } else if (guns.isSelected()) {
        konserDipilih = listKonser.get(1);  // Misalnya listKonser.get(1) adalah Guns N' Roses
    }
    
    if (konserDipilih == null) {
        JOptionPane.showMessageDialog(this, "Pilih konser terlebih dahulu.");
        return; // Tidak lanjut jika konser belum dipilih
    }

    // Mendapatkan baris yang dipilih dari tabel
    int selectedRow = tblData.getSelectedRow();
    if (selectedRow != -1) {
        String idPemesanan = (String) tblData.getValueAt(selectedRow, 0);  // ID pemesanan dari tabel

        // Mengupdate Tiket VIP jika ditemukan
        for (TiketVIP t : listTiketVIP) {
            if (String.valueOf(t.getIdPemesanan()).equals(idPemesanan)) {
                // Mengubah data pelanggan
                t.getPelanggan().setNama(namaPelanggan);
                t.getPelanggan().setEmail(emailPelanggan);
                t.getPelanggan().setNotelp(notelpPelanggan);
                t.setJumlahTiket(jumlahTiket);  // Mengupdate jumlah tiket
                
                // Jika jenis tiket berubah dari VIP ke Reguler
                if (!"VIP".equals(jenisTiket)) {
                    // Menghapus tiket VIP yang lama
                    listTiketVIP.remove(t);
                    // Membuat tiket Reguler baru dengan konser yang dipilih
                    TiketReguler tiketReguler = new TiketReguler(listTiketReguler.size() + 1, 50000, "Fasilitas Reguler", t.getPelanggan(), jenisTiket, jumlahTiket, konserDipilih);
                    listTiketReguler.add(tiketReguler);
                } else {
                    // Jika konser berubah, pastikan konser yang benar diterapkan
                    t.setKonser(konserDipilih);  // Update konser
                }
                tampilData();  // Menampilkan data yang sudah diubah
                resetInputan();
                simpanedit.setEnabled(false); // Menonaktifkan tombol Simpan Edit
                return;
            }
        }

        // Mengupdate Tiket Reguler jika ditemukan
        for (TiketReguler t : listTiketReguler) {
            if (String.valueOf(t.getIdPemesanan()).equals(idPemesanan)) {
                // Mengubah data pelanggan
                t.getPelanggan().setNama(namaPelanggan);
                t.getPelanggan().setEmail(emailPelanggan);
                t.getPelanggan().setNotelp(notelpPelanggan);
                t.setJumlahTiket(jumlahTiket);  // Mengupdate jumlah tiket
                
                // Jika jenis tiket berubah dari Reguler ke VIP
                if (!"Reguler".equals(jenisTiket)) {
                    // Menghapus tiket Reguler yang lama
                    listTiketReguler.remove(t);
                    // Membuat tiket VIP baru dengan konser yang dipilih
                    TiketVIP tiketVIP = new TiketVIP(listTiketVIP.size() + 1, 100000, "Fasilitas VIP", t.getPelanggan(), jenisTiket, jumlahTiket, konserDipilih);
                    listTiketVIP.add(tiketVIP);
                } else {
                    // Jika konser berubah, pastikan konser yang benar diterapkan
                    t.setKonser(konserDipilih);  // Update konser
                }
                tampilData();  // Menampilkan data yang sudah diubah
                resetInputan();
                simpanedit.setEnabled(false); // Menonaktifkan tombol Simpan Edit
                return;
            }
        }
    }
    }//GEN-LAST:event_simpaneditActionPerformed

    private void CariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariActionPerformed
        // TODO add your handling code here:
        kembali.setEnabled(true);
        String kataKunci = cari1.getText().toLowerCase();  // Ambil input pencarian dan ubah ke lowercase
    String[] kolom = {"ID Pemesanan", "Nama", "Email", "Jenis Tiket", "Jumlah Tiket", "Total Harga"};
    ArrayList<Object[]> hasilCari = new ArrayList<>();
    
    // Cari data di listTiketVIP
    for (TiketVIP t : listTiketVIP) {
        if (t.getPelanggan().getNama().toLowerCase().contains(kataKunci) ||
            t.getPelanggan().getEmail().toLowerCase().contains(kataKunci) ||
            String.valueOf(t.getIdPemesanan()).contains(kataKunci)) {
            
            String[] arrData = {
                String.valueOf(t.getIdPemesanan()),
                t.getPelanggan().getNama(),
                t.getPelanggan().getEmail(),
                "VIP",
                String.valueOf(t.getJumlahTiket()),
                String.valueOf(t.hitungHarga()) // Total Harga Tiket VIP
            };
            hasilCari.add(arrData);
        }
    }

    // Cari data di listTiketReguler
    for (TiketReguler t : listTiketReguler) {
        if (t.getPelanggan().getNama().toLowerCase().contains(kataKunci) ||
            t.getPelanggan().getEmail().toLowerCase().contains(kataKunci) ||
            String.valueOf(t.getIdPemesanan()).contains(kataKunci)) {
            
            String[] arrData = {
                String.valueOf(t.getIdPemesanan()),
                t.getPelanggan().getNama(),
                t.getPelanggan().getEmail(),
                "Reguler",
                String.valueOf(t.getJumlahTiket()),
                String.valueOf(t.hitungHarga()) // Total Harga Tiket Reguler
            };
            hasilCari.add(arrData);
        }
    }

    // Menyiapkan data untuk ditampilkan pada tabel
    Object[][] objData = new Object[hasilCari.size()][6];
    for (int i = 0; i < hasilCari.size(); i++) {
        objData[i] = hasilCari.get(i);
    }

    // Menampilkan data pada tabel
    tabelModel = new DefaultTableModel(objData, kolom) {
        @Override
        public boolean isCellEditable(int rowIndex, int colIndex) {
            return false;
        }
    };
    tblData.setModel(tabelModel);
    }//GEN-LAST:event_CariActionPerformed

    private void kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kembaliActionPerformed
        // TODO add your handling code here:
        tampilData();
    // Reset text field pencarian
        cari1.setText("");
        kembali.setEnabled(false);
    }  

    private void tampilkanHasilPencarian(ArrayList<String[]> hasilPencarian) {
    String[] kolom = {"ID Pemesanan", "Nama", "Email", "No Telepon", "Jenis Tiket", "Jumlah Tiket"};
    Object[][] objData = new Object[hasilPencarian.size()][6];

    // Memasukkan data hasil pencarian ke dalam objData
    for (int i = 0; i < hasilPencarian.size(); i++) {
        objData[i] = hasilPencarian.get(i);
    }

    // Menampilkan hasil pencarian di tabel
    tabelModel = new DefaultTableModel(objData, kolom) {
        // Membuat tabel tidak bisa diedit saat diklik
        @Override
        public boolean isCellEditable(int rowIndex, int colIndex) {
            return false;
        }
    };

    tblData.setModel(tabelModel);

    }//GEN-LAST:event_kembaliActionPerformed

    private void metalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metalActionPerformed

    public void tampilData(){
    String[] kolom = {"ID Pemesanan", "Nama", "Email", "No Telp", "Jenis Tiket", "Jumlah Tiket", "Total Harga", "Status Pembayaran", "Nama Konser"};
    Object[][] objData = new Object[listTiketVIP.size() + listTiketReguler.size()][9];  // Jumlah data hanya tiket VIP dan Reguler
    
    int i = 0;

    // Menampilkan data tiket VIP
    for(TiketVIP t : listTiketVIP){
        double totalHargaVIP = t.hitungHarga();  // Menghitung total harga tiket VIP
        String[] arrData = {
            String.valueOf(t.getIdPemesanan()),  // ID Pemesanan
            t.getPelanggan().getNama(),  // Nama Pelanggan
            t.getPelanggan().getEmail(),  // Email Pelanggan
            t.getPelanggan().getNotelp(),  // No Telp Pelanggan
            "VIP",  // Jenis Tiket
            String.valueOf(t.getJumlahTiket()),  // Jumlah Tiket
            String.valueOf(totalHargaVIP),  // Total Harga Tiket VIP
            "Lunas",
            t.getKonser().getNamaKonser()
        };
        objData[i] = arrData;
        i++;
    }

    // Menampilkan data tiket Reguler
    for(TiketReguler t : listTiketReguler){
        double totalHargaReguler = t.hitungHarga();  // Menghitung total harga tiket Reguler
        String[] arrData = {
            String.valueOf(t.getIdPemesanan()),  // ID Pemesanan
            t.getPelanggan().getNama(),  // Nama Pelanggan
            t.getPelanggan().getEmail(),  // Email Pelanggan
            t.getPelanggan().getNotelp(),  // No Telp Pelanggan
            "Reguler",  // Jenis Tiket
            String.valueOf(t.getJumlahTiket()),  // Jumlah Tiket
            String.valueOf(totalHargaReguler),  // Total Harga Tiket Reguler
            "Lunas",
            t.getKonser().getNamaKonser()
        };
        objData[i] = arrData;
        i++;
    }

    // Membuat model tabel dan menampilkan data
    tabelModel = new DefaultTableModel(objData, kolom){
        @Override
        public boolean isCellEditable(int rowIndex, int colIndex) {
            return false;  // Membuat tabel tidak bisa diedit oleh pengguna
        }
    };
    
    tblData.setModel(tabelModel);  // Set model ke tabel data
}

    private void resetInputan() {
    // Mengatur semua input field ke nilai default atau kosong
    nama.setText("");           // Mengosongkan text field untuk nama
    email.setText("");          // Mengosongkan text field untuk email
    notelp.setText("");         // Mengosongkan text field untuk nomor telepon
    tiket.setSelectedIndex(0);  // Mengembalikan pilihan JComboBox ke pilihan pertama (yaitu "----")
    jumlah.setText("");         // Mengosongkan text field untuk jumlah tiket
    ID.setText("");             // Mengosongkan text field untuk ID pemesanan
    buttonGroup1.clearSelection();
    // Fokus kembali pada field nama, agar pengguna bisa langsung mengetik
    nama.requestFocus();      // Fokus kembali pada field Nama (agar pengguna bisa langsung mulai mengetik)
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Percob.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Percob.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Percob.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Percob.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Percob().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cari;
    private javax.swing.JButton Edit;
    private javax.swing.JButton Hapus;
    private javax.swing.JTextField ID;
    private javax.swing.JButton Simpan;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cari1;
    private javax.swing.JTextField email;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JRadioButton guns;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jumlah;
    private javax.swing.JButton kembali;
    private javax.swing.JRadioButton metal;
    private javax.swing.JTextField nama;
    private javax.swing.JTextField notelp;
    private javax.swing.JButton simpanedit;
    private javax.swing.JTable tblData;
    private javax.swing.JComboBox<String> tiket;
    // End of variables declaration//GEN-END:variables
}
